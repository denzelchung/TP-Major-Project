/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-06-30 15:48:57 UTC)
 * on 2014-07-11 at 01:28:24 UTC 
 * Modify at your own risk.
 */

package com.appspot.cenplusplus.cenplusplus;

/**
 * Service definition for Cenplusplus (v1).
 *
 * <p>
 * API v1.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CenplusplusRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Cenplusplus extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the cenplusplus library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://cenplusplus.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "cenplusplus/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Cenplusplus(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Cenplusplus(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Garden collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Cenplusplus cenplusplus = new Cenplusplus(...);}
   *   {@code Cenplusplus.Garden.List request = cenplusplus.garden().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Garden garden() {
    return new Garden();
  }

  /**
   * The "garden" collection of methods.
   */
  public class Garden {

    /**
     * Create a request for the method "garden.neighbourhood".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link Neighbourhood#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Neighbourhood neighbourhood() throws java.io.IOException {
      Neighbourhood result = new Neighbourhood();
      initialize(result);
      return result;
    }

    public class Neighbourhood extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloNeighbourhoodCollection> {

      private static final String REST_PATH = "neighbourhoods";

      /**
       * Create a request for the method "garden.neighbourhood".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link Neighbourhood#execute()} method to invoke the remote
       * operation. <p> {@link Neighbourhood#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected Neighbourhood() {
        super(Cenplusplus.this, "GET", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloNeighbourhoodCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Neighbourhood setAlt(java.lang.String alt) {
        return (Neighbourhood) super.setAlt(alt);
      }

      @Override
      public Neighbourhood setFields(java.lang.String fields) {
        return (Neighbourhood) super.setFields(fields);
      }

      @Override
      public Neighbourhood setKey(java.lang.String key) {
        return (Neighbourhood) super.setKey(key);
      }

      @Override
      public Neighbourhood setOauthToken(java.lang.String oauthToken) {
        return (Neighbourhood) super.setOauthToken(oauthToken);
      }

      @Override
      public Neighbourhood setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Neighbourhood) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Neighbourhood setQuotaUser(java.lang.String quotaUser) {
        return (Neighbourhood) super.setQuotaUser(quotaUser);
      }

      @Override
      public Neighbourhood setUserIp(java.lang.String userIp) {
        return (Neighbourhood) super.setUserIp(userIp);
      }

      @Override
      public Neighbourhood set(String parameterName, Object value) {
        return (Neighbourhood) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "garden.status".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link Status#execute()} method to invoke the remote operation.
     *
     * @param location
     * @return the request
     */
    public Status status(java.lang.String location) throws java.io.IOException {
      Status result = new Status(location);
      initialize(result);
      return result;
    }

    public class Status extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloGardenRecord> {

      private static final String REST_PATH = "garden";

      /**
       * Create a request for the method "garden.status".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link Status#execute()} method to invoke the remote operation.
       * <p> {@link
       * Status#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param location
       * @since 1.13
       */
      protected Status(java.lang.String location) {
        super(Cenplusplus.this, "GET", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloGardenRecord.class);
        this.location = com.google.api.client.util.Preconditions.checkNotNull(location, "Required parameter location must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Status setAlt(java.lang.String alt) {
        return (Status) super.setAlt(alt);
      }

      @Override
      public Status setFields(java.lang.String fields) {
        return (Status) super.setFields(fields);
      }

      @Override
      public Status setKey(java.lang.String key) {
        return (Status) super.setKey(key);
      }

      @Override
      public Status setOauthToken(java.lang.String oauthToken) {
        return (Status) super.setOauthToken(oauthToken);
      }

      @Override
      public Status setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Status) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Status setQuotaUser(java.lang.String quotaUser) {
        return (Status) super.setQuotaUser(quotaUser);
      }

      @Override
      public Status setUserIp(java.lang.String userIp) {
        return (Status) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String location;

      /**

       */
      public java.lang.String getLocation() {
        return location;
      }

      public Status setLocation(java.lang.String location) {
        this.location = location;
        return this;
      }

      @Override
      public Status set(String parameterName, Object value) {
        return (Status) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Login collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Cenplusplus cenplusplus = new Cenplusplus(...);}
   *   {@code Cenplusplus.Login.List request = cenplusplus.login().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Login login() {
    return new Login();
  }

  /**
   * The "login" collection of methods.
   */
  public class Login {

    /**
     * Create a request for the method "login.register".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link Register#execute()} method to invoke the remote operation.
     *
     * @param username
     * @param password
     * @param email
     * @return the request
     */
    public Register register(java.lang.String username, java.lang.String password, java.lang.String email) throws java.io.IOException {
      Register result = new Register(username, password, email);
      initialize(result);
      return result;
    }

    public class Register extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloValidUser> {

      private static final String REST_PATH = "register";

      /**
       * Create a request for the method "login.register".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link Register#execute()} method to invoke the remote operation.
       * <p> {@link
       * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param username
       * @param password
       * @param email
       * @since 1.13
       */
      protected Register(java.lang.String username, java.lang.String password, java.lang.String email) {
        super(Cenplusplus.this, "POST", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloValidUser.class);
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
        this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public Register setAlt(java.lang.String alt) {
        return (Register) super.setAlt(alt);
      }

      @Override
      public Register setFields(java.lang.String fields) {
        return (Register) super.setFields(fields);
      }

      @Override
      public Register setKey(java.lang.String key) {
        return (Register) super.setKey(key);
      }

      @Override
      public Register setOauthToken(java.lang.String oauthToken) {
        return (Register) super.setOauthToken(oauthToken);
      }

      @Override
      public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Register) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Register setQuotaUser(java.lang.String quotaUser) {
        return (Register) super.setQuotaUser(quotaUser);
      }

      @Override
      public Register setUserIp(java.lang.String userIp) {
        return (Register) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Register setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public Register setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Register setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Register set(String parameterName, Object value) {
        return (Register) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "login.validate".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link Validate#execute()} method to invoke the remote operation.
     *
     * @param username
     * @param password
     * @return the request
     */
    public Validate validate(java.lang.String username, java.lang.String password) throws java.io.IOException {
      Validate result = new Validate(username, password);
      initialize(result);
      return result;
    }

    public class Validate extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloLoginUser> {

      private static final String REST_PATH = "login/{username}";

      /**
       * Create a request for the method "login.validate".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link Validate#execute()} method to invoke the remote operation.
       * <p> {@link
       * Validate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param username
       * @param password
       * @since 1.13
       */
      protected Validate(java.lang.String username, java.lang.String password) {
        super(Cenplusplus.this, "POST", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloLoginUser.class);
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
        this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      }

      @Override
      public Validate setAlt(java.lang.String alt) {
        return (Validate) super.setAlt(alt);
      }

      @Override
      public Validate setFields(java.lang.String fields) {
        return (Validate) super.setFields(fields);
      }

      @Override
      public Validate setKey(java.lang.String key) {
        return (Validate) super.setKey(key);
      }

      @Override
      public Validate setOauthToken(java.lang.String oauthToken) {
        return (Validate) super.setOauthToken(oauthToken);
      }

      @Override
      public Validate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Validate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Validate setQuotaUser(java.lang.String quotaUser) {
        return (Validate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Validate setUserIp(java.lang.String userIp) {
        return (Validate) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Validate setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public Validate setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @Override
      public Validate set(String parameterName, Object value) {
        return (Validate) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Rain collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Cenplusplus cenplusplus = new Cenplusplus(...);}
   *   {@code Cenplusplus.Rain.List request = cenplusplus.rain().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Rain rain() {
    return new Rain();
  }

  /**
   * The "rain" collection of methods.
   */
  public class Rain {

    /**
     * Create a request for the method "rain.getArea".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link GetArea#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public GetArea getArea(java.lang.String id) throws java.io.IOException {
      GetArea result = new GetArea(id);
      initialize(result);
      return result;
    }

    public class GetArea extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloRainLocation> {

      private static final String REST_PATH = "rainAreas/{id}";

      /**
       * Create a request for the method "rain.getArea".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link GetArea#execute()} method to invoke the remote operation.
       * <p> {@link
       * GetArea#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetArea(java.lang.String id) {
        super(Cenplusplus.this, "GET", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloRainLocation.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetArea setAlt(java.lang.String alt) {
        return (GetArea) super.setAlt(alt);
      }

      @Override
      public GetArea setFields(java.lang.String fields) {
        return (GetArea) super.setFields(fields);
      }

      @Override
      public GetArea setKey(java.lang.String key) {
        return (GetArea) super.setKey(key);
      }

      @Override
      public GetArea setOauthToken(java.lang.String oauthToken) {
        return (GetArea) super.setOauthToken(oauthToken);
      }

      @Override
      public GetArea setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetArea) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetArea setQuotaUser(java.lang.String quotaUser) {
        return (GetArea) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetArea setUserIp(java.lang.String userIp) {
        return (GetArea) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public GetArea setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public GetArea set(String parameterName, Object value) {
        return (GetArea) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "rain.listAreas".
     *
     * This request holds the parameters needed by the cenplusplus server.  After setting any optional
     * parameters, call the {@link ListAreas#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListAreas listAreas() throws java.io.IOException {
      ListAreas result = new ListAreas();
      initialize(result);
      return result;
    }

    public class ListAreas extends CenplusplusRequest<com.appspot.cenplusplus.cenplusplus.model.HelloRainLocationCollection> {

      private static final String REST_PATH = "rainAreas";

      /**
       * Create a request for the method "rain.listAreas".
       *
       * This request holds the parameters needed by the the cenplusplus server.  After setting any
       * optional parameters, call the {@link ListAreas#execute()} method to invoke the remote
       * operation. <p> {@link
       * ListAreas#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListAreas() {
        super(Cenplusplus.this, "GET", REST_PATH, null, com.appspot.cenplusplus.cenplusplus.model.HelloRainLocationCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListAreas setAlt(java.lang.String alt) {
        return (ListAreas) super.setAlt(alt);
      }

      @Override
      public ListAreas setFields(java.lang.String fields) {
        return (ListAreas) super.setFields(fields);
      }

      @Override
      public ListAreas setKey(java.lang.String key) {
        return (ListAreas) super.setKey(key);
      }

      @Override
      public ListAreas setOauthToken(java.lang.String oauthToken) {
        return (ListAreas) super.setOauthToken(oauthToken);
      }

      @Override
      public ListAreas setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListAreas) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListAreas setQuotaUser(java.lang.String quotaUser) {
        return (ListAreas) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListAreas setUserIp(java.lang.String userIp) {
        return (ListAreas) super.setUserIp(userIp);
      }

      @Override
      public ListAreas set(String parameterName, Object value) {
        return (ListAreas) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Cenplusplus}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Cenplusplus}. */
    @Override
    public Cenplusplus build() {
      return new Cenplusplus(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CenplusplusRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCenplusplusRequestInitializer(
        CenplusplusRequestInitializer cenplusplusRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(cenplusplusRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
